@use "../settings";

@use "sass:color";
@use "sass:math";
@use "sass:map";

// Get color from palette
@function fs-color($color) {
  @if not map.has-key(settings.$fs-color-palette, $color) {
    @warn "Colour `#{$color}` could not be found - expected a key from the `$fs-color-palette` map.";
    @return #000;
  } @else {
    @return map.get(settings.$fs-color-palette, $color);
  }
}

// Color tweaking functions
@function fs-color-shade($color, $percentage) {
  @return color.mix(#000000, $color, $percentage);
}

@function fs-color-tint($color, $percentage) {
  @return color.mix(#ffffff, $color, $percentage);
}

// Programatically determine whether black or white provides greater contrast for a given color
// Hat tip: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// Calculations derived from https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function _fs-color-luminance-channel($value) {
  $value: math.div($value, 255);
  @if $value < 0.03928 {
    @return math.div($value, 12.92);
  } @else {
    @return math.pow(math.div(($value + 0.055), 1.055), 2.4);
  }
}

@function _fs-color-luminance($color) {
  $red: _fs-color-luminance-channel(color.red($color));
  $green: _fs-color-luminance-channel(color.green($color));
  $blue: _fs-color-luminance-channel(color.blue($color));
  @return (0.2126 * $red) + (0.7152 * $green) + (0.0722 * $blue);
}

@function _fs-color-contrast($col1, $col2) {
  $col1-lum: _fs-color-luminance($col1);
  $col2-lum: _fs-color-luminance($col2);
  @if settings.$fs-enable-weber-contrast {
    // Huang/Peli modified Weber perceptual contrast calculation
    @return math.div(
      (math.max($col1-lum, $col2-lum) - math.min($col1-lum, $col2-lum)),
      (math.max($col1-lum, $col2-lum) + 0.05)
    );
  } @else {
    // WCAG linear contrast ratio calculation
    @return math.div(
      (math.max($col1-lum, $col2-lum) + 0.05),
      (math.min($col1-lum, $col2-lum) + 0.05)
    );
  }
}

// Select a given light or dark colour, depending on which provides greater contrast with the base colour
@function fs-contrasting-color(
  $color,
  $light-color: white,
  $dark-color: black
) {
  $light-contrast: _fs-color-contrast($color, $light-color);
  $dark-contrast: _fs-color-contrast($color, $dark-color);
  @if ($light-contrast > $dark-contrast) {
    @return $light-color;
  } @else {
    @return $dark-color;
  }
}

// The above, but wrapped up in an existence check.
// If $color is defined, use it. If not, fall back to whatever provides greater contrast with the 'paired' colour.
@function fs-color-if-set(
  $color,
  $paired-color,
  $light-color: white,
  $dark-color: black
) {
  @if $color {
    @return $color;
  } @else {
    @return fs-contrasting-color($paired-color, $light-color, $dark-color);
  }
}

// Text selection highlight colour
@mixin fs-selection-highlight($color: settings.$fs-selection-color) {
  color: fs-contrasting-color($color);
  background-color: $color;
}
