@use "../settings";
@use "../helpers/colors";
@use "../helpers/media-queries";
@use "../helpers/reset";
@use "../helpers/spacing";
@use "../helpers/links";
@use "../helpers/typography";

@use "sass:color";

// Button - Generic
$border-width: settings.$fs-border-width-form-element !default;
$border-radius: if(
  settings.$fs-enable-rounded-corners,
  settings.$fs-border-radius,
  0
) !default;
$all-caps: false !default;

// Button - Default
$background-color: colors.fs-color("grey20") !default;
$background-hover-color: colors.fs-color("grey30") !default;
$text-color: false !default;

// Button - Primary
$primary-background-color: settings.$fs-brand-color !default;
$primary-background-hover-color: color.mix(
  #000,
  $primary-background-color,
  20%
) !default;
$primary-text-color: false !default;

// Button - Ghost
$ghost-background-color: transparent !default;
$ghost-background-hover-color: false !default;
$ghost-text-color: inherit !default;

.fs-button {
  @include reset.fs-reset-button;
  @include spacing.fs-responsive-margin(0, $direction: all);
  @include spacing.fs-responsive-padding(2, $direction: block);
  @include spacing.fs-responsive-padding(3, $direction: inline);
  @include typography.fs-font-stack(body, $weight: bold);
  @include typography.fs-font-size(16);
  display: inline-block; // fallback for browsers that don't allow buttons to be flexboxes
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border: $border-width solid currentColor;
  border-radius: $border-radius;
  position: relative;
  text-align: center;
  text-decoration: none;
  line-height: inherit;
  vertical-align: middle;
  @if $all-caps {
    text-transform: uppercase;
    letter-spacing: 0.01em;
  }
  &:not([data-appearance]) {
    border-color: $background-color;
    color: colors.fs-color-if-set($text-color, $background-color);
    background-color: $background-color;
    &:hover,
    &:active {
      border-color: $background-hover-color;
      background-color: $background-hover-color;
    }
  }
  &[data-appearance="primary"] {
    border-color: $primary-background-color;
    color: colors.fs-color-if-set(
      $primary-text-color,
      $primary-background-color
    );
    background-color: $primary-background-color;
    &:hover,
    &:active {
      border-color: $primary-background-hover-color;
      background-color: $primary-background-hover-color;
    }
  }
  &[data-appearance="ghost"] {
    color: $ghost-text-color;
    background-color: $ghost-background-color;
    &:hover,
    &:active {
      background-color: if(
        $ghost-background-hover-color,
        $ghost-background-hover-color,
        color.change($primary-background-hover-color, $alpha: 0.15)
      );
    }
  }
  &[data-appearance="destructive"] {
    border-color: settings.$fs-error-color;
    color: colors.fs-contrasting-color(settings.$fs-error-color);
    background-color: settings.$fs-error-color;
    &:hover,
    &:active {
      $hover-color: color.mix(#000, settings.$fs-error-color, 20%);
      border-color: $hover-color;
      background-color: $hover-color;
    }
  }
  &[data-appearance="link"] {
    @include spacing.fs-responsive-padding(0, $direction: all);
    @include typography.fs-font-stack(body, $weight: regular);
    @include links.fs-link($visited-style: false, $underline: true);
    display: inline;
    border: none;
    background-color: transparent;
  }
  &[data-layout="block"] {
    inline-size: 100%;
  }
  &[data-layout="elastic"] {
    inline-size: 100%;
    @include media-queries.fs-mq($from: tablet) {
      inline-size: auto;
    }
  }
  &:disabled {
    opacity: 0.3;
    pointer-events: none;
    cursor: default;
  }
}
