{"version":3,"names":[],"mappings":"","sources":["components/textarea-counter.js"],"sourcesContent":["class TextareaCounter {\n  constructor($module) {\n    this.$module = $module;\n    this.$textarea = $module.querySelector(\"textarea\");\n    this.$counter = this.buildCounterHtml();\n    // Activate!\n    this.updateCounter();\n    // Bind input event\n    this.$textarea.addEventListener(\"input\", () => {\n      this.updateCounter();\n    });\n  }\n  buildCounterHtml() {\n    if (!this.$textarea.id) {\n      console.error(\n        \"TextareaCounter: Textarea must have a unique `id` attribute set to attach a character counter.\"\n      );\n      return;\n    }\n    if (!this.$textarea.maxLength) {\n      console.error(\n        \"TextareaCounter: Textarea must have a `maxlength` attribute set to attach a character counter.\"\n      );\n      return;\n    }\n    this.maxlength = this.$textarea.maxLength;\n    const counterId = this.$textarea.id + \"-Counter\";\n    // Add `aria-describedby` attribute to textarea\n    if (this.$textarea.getAttribute(\"aria-describedby\")) {\n      const describedBy = this.$textarea.getAttribute(\"aria-describedby\");\n      this.$textarea.setAttribute(\n        \"aria-describedby\",\n        `${describedBy} ${counterId}`\n      );\n    } else {\n      this.$textarea.setAttribute(\"aria-describedby\", counterId);\n    }\n    // Remove maxlength attribute as we're going to validate that separately now\n    this.$textarea.removeAttribute(\"maxlength\");\n    // Create counter HTML\n    const $counterContainer = document.createElement(\"div\");\n    $counterContainer.setAttribute(\"id\", counterId);\n    $counterContainer.classList.add(\"fs-textarea-counter__counter\");\n    // Append\n    this.$module.appendChild($counterContainer);\n    return $counterContainer;\n  }\n  updateCounter() {\n    const count = this.count();\n    let counterText = \"\";\n    if (count.tooLong) {\n      counterText =\n        count.charactersOver === 1\n          ? `Limit reached. You're over by ${count.charactersOver} character.`\n          : `Limit reached. You're over by ${count.charactersOver} characters.`;\n      this.$counter.setAttribute(\"role\", \"alert\");\n      this.$textarea.setCustomValidity(\n        `Input is too long. A maximum of ${count.maxlength} characters are allowed. You have used ${count.charactersUsed} characters.`\n      );\n    } else {\n      counterText =\n        count.charactersRemaining === 1\n          ? `You have ${count.charactersRemaining} character remaining.`\n          : `You have ${count.charactersRemaining} characters remaining.`;\n      this.$counter.removeAttribute(\"role\");\n      this.$textarea.setCustomValidity(\"\");\n    }\n    this.$counter.innerText = counterText;\n    this.$counter.setAttribute(\n      \"aria-live\",\n      count.charactersRemaining < 1 ? \"assertive\" : \"polite\"\n    );\n  }\n  count() {\n    const charactersRemaining = this.maxlength - this.$textarea.value.length;\n    return {\n      maxlength: this.maxlength,\n      charactersUsed: this.$textarea.value.length,\n      charactersRemaining: charactersRemaining,\n      charactersOver:\n        charactersRemaining < 0 ? Math.abs(charactersRemaining) : 0,\n      tooLong: charactersRemaining < 0 ? true : false,\n    };\n  }\n}\n\nexport default TextareaCounter;\n"],"file":"textarea-counter.js"}