{"version":3,"names":[],"mappings":"","sources":["components/tooltip.js"],"sourcesContent":["import { GenerateGuid } from \"../helpers/strings.js\";\nimport { KeyCodes } from \"../helpers/key-codes.js\";\n\nclass Tooltip {\n  constructor($module) {\n    this.$module = $module;\n    this.$trigger = $module.firstElementChild;\n    this.$tooltip = $module.querySelector(\".fs-tooltip__tip\");\n    this.timeoutId = null;\n    this.timeoutLength = 500; // milliseconds\n    this.tooltipOriginalId = this.$tooltip.id;\n    this.tooltipId = this.tooltipOriginalId || `tooltip-${GenerateGuid()}`;\n    // There's no tooltip, exit\n    if (!this.$trigger || !this.$tooltip) {\n      return;\n    }\n    this.create();\n  }\n  create() {\n    // Tooltip a11y\n    this.$tooltip.setAttribute(\"id\", this.tooltipId);\n    this.$tooltip.setAttribute(\"aria-hidden\", \"true\");\n    // Trigger events\n    this.$trigger.boundMouseEnter = this.onFocus.bind(this);\n    this.$trigger.boundMouseLeave = this.onMouseLeave.bind(this);\n    this.$trigger.boundFocus = this.onFocus.bind(this);\n    this.$trigger.boundBlur = this.onBlur.bind(this);\n    this.$trigger.boundEscape = this.onEscape.bind(this);\n    this.$trigger.addEventListener(\n      \"mouseenter\",\n      this.$trigger.boundMouseEnter,\n      true\n    );\n    this.$trigger.addEventListener(\n      \"mouseleave\",\n      this.$trigger.boundMouseLeave,\n      true\n    );\n    this.$trigger.addEventListener(\"focus\", this.$trigger.boundFocus, true);\n    this.$trigger.addEventListener(\"blur\", this.$trigger.boundBlur, true);\n    this.$trigger.addEventListener(\"keydown\", this.$trigger.boundEscape, true);\n    this.hideTooltip();\n  }\n  destroy() {\n    if (this.tooltipOriginalId) {\n      this.$tooltip.setAttribute(\"id\", this.tooltipOriginalId);\n    } else {\n      this.$tooltip.removeAttribute(\"id\");\n    }\n    this.$tooltip.removeAttribute(\"aria-hidden\");\n    this.$trigger.removeEventListener(\n      \"mouseenter\",\n      this.$trigger.boundMouseEnter,\n      true\n    );\n    this.$trigger.removeEventListener(\n      \"mouseleave\",\n      this.$trigger.boundMouseLeave,\n      true\n    );\n    this.$trigger.removeEventListener(\"focus\", this.$trigger.boundFocus, true);\n    this.$trigger.removeEventListener(\"blur\", this.$trigger.boundBlur, true);\n    this.$trigger.removeEventListener(\n      \"keydown\",\n      this.$trigger.boundEscape,\n      true\n    );\n  }\n  onFocus() {\n    this.showTooltip();\n  }\n  onBlur() {\n    this.hideTooltip();\n  }\n  onEscape(e) {\n    const code = e.which || e.keyCode;\n    if (code === KeyCodes().ESCAPE) {\n      this.hideTooltip();\n    }\n  }\n  onMouseEnter() {\n    this.showTooltip();\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n  }\n  onMouseLeave() {\n    this.timeoutId = setTimeout(() => {\n      this.hideTooltip();\n    }, this.timeoutLength);\n  }\n  showTooltip() {\n    this.determinePosition();\n    this.$tooltip.classList.remove(\"fs-tooltip__tip--hidden\");\n    this.$tooltip.setAttribute(\"aria-hidden\", \"false\");\n  }\n  hideTooltip() {\n    this.$tooltip.classList.add(\"fs-tooltip__tip--hidden\");\n    this.$tooltip.setAttribute(\"aria-hidden\", \"true\");\n  }\n  determinePosition() {\n    // Calculate element positions\n    const rect = this.$trigger.getBoundingClientRect();\n    const spaceAvailable = {\n      top: rect.top,\n      left: rect.left,\n      right: window.innerWidth - rect.right,\n      bottom: window.innerHeight - rect.bottom,\n    };\n    // Iterate though the results to find where we have the most space\n    let largestVal = 0;\n    let largestKey = null;\n    Object.keys(spaceAvailable).map((key) => {\n      if (spaceAvailable[key] > largestVal) {\n        largestVal = spaceAvailable[key];\n        largestKey = key;\n      }\n    });\n    this.$tooltip.dataset.side = largestKey || \"bottom\";\n  }\n}\n\nexport default Tooltip;\n"],"file":"tooltip.js"}