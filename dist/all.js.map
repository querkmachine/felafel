{"version":3,"names":[],"mappings":"","sources":["all.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.fs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initAll = initAll;\nObject.defineProperty(exports, \"TextareaCounter\", {\n  enumerable: true,\n  get: function () {\n    return _textareaCounter.default;\n  }\n});\n\nvar _textareaCounter = _interopRequireDefault(require(\"./components/textarea-counter\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction initAll(options) {\n  options = typeof options !== \"undefined\" ? options : {}; // Scope initialization to only certain parts of the page\n  // Defaults to entire document if not set\n\n  const scope = typeof options.scope !== \"undefined\" ? options.scope : document;\n  scope.querySelectorAll('[data-module=\"fs-textarea-counter\"]').forEach(m => {\n    new _textareaCounter.default(m);\n  });\n}\n\n},{\"./components/textarea-counter\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nclass TextareaCounter {\n  constructor($module) {\n    this.$module = $module;\n    this.$textarea = $module.querySelector(\"textarea\");\n    this.$counter = this.buildCounterHtml(); // Activate!\n\n    this.updateCounter(); // Bind input event\n\n    this.$textarea.addEventListener(\"input\", () => {\n      this.updateCounter();\n    });\n  }\n\n  buildCounterHtml() {\n    if (!this.$textarea.id) {\n      console.error(\"TextareaCounter: Textarea must have a unique `id` attribute set to attach a character counter.\");\n      return;\n    }\n\n    if (!this.$textarea.maxLength) {\n      console.error(\"TextareaCounter: Textarea must have a `maxlength` attribute set to attach a character counter.\");\n      return;\n    }\n\n    this.maxlength = this.$textarea.maxLength;\n    const counterId = this.$textarea.id + \"-Counter\"; // Add `aria-describedby` attribute to textarea\n\n    if (this.$textarea.getAttribute(\"aria-describedby\")) {\n      const describedBy = this.$textarea.getAttribute(\"aria-describedby\");\n      this.$textarea.setAttribute(\"aria-describedby\", `${describedBy} ${counterId}`);\n    } else {\n      this.$textarea.setAttribute(\"aria-describedby\", counterId);\n    } // Remove maxlength attribute as we're going to validate that separately now\n\n\n    this.$textarea.removeAttribute(\"maxlength\"); // Create counter HTML\n\n    const $counterContainer = document.createElement(\"div\");\n    $counterContainer.setAttribute(\"id\", counterId);\n    $counterContainer.classList.add(\"fs-textarea-counter__counter\"); // Append\n\n    this.$module.appendChild($counterContainer);\n    return $counterContainer;\n  }\n\n  updateCounter() {\n    const count = this.count();\n    let counterText = \"\";\n\n    if (count.tooLong) {\n      counterText = count.charactersOver === 1 ? `Limit reached. You're over by ${count.charactersOver} character.` : `Limit reached. You're over by ${count.charactersOver} characters.`;\n      this.$counter.setAttribute(\"role\", \"alert\");\n      this.$textarea.setCustomValidity(`Input is too long. A maximum of ${count.maxlength} characters are allowed. You have used ${count.charactersUsed} characters.`);\n    } else {\n      counterText = count.charactersRemaining === 1 ? `You have ${count.charactersRemaining} character remaining.` : `You have ${count.charactersRemaining} characters remaining.`;\n      this.$counter.removeAttribute(\"role\");\n      this.$textarea.setCustomValidity(\"\");\n    }\n\n    this.$counter.innerText = counterText;\n    this.$counter.setAttribute(\"aria-live\", count.charactersRemaining < 1 ? \"assertive\" : \"polite\");\n  }\n\n  count() {\n    const charactersRemaining = this.maxlength - this.$textarea.value.length;\n    return {\n      maxlength: this.maxlength,\n      charactersUsed: this.$textarea.value.length,\n      charactersRemaining: charactersRemaining,\n      charactersOver: charactersRemaining < 0 ? Math.abs(charactersRemaining) : 0,\n      tooLong: charactersRemaining < 0 ? true : false\n    };\n  }\n\n}\n\nexports.default = TextareaCounter;\n\n},{}]},{},[1])(1)\n});\n"],"file":"all.js"}