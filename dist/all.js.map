{"version":3,"names":[],"mappings":"","sources":["all.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.fs = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initAll = initAll;\nObject.defineProperty(exports, \"DetailsGroup\", {\n  enumerable: true,\n  get: function () {\n    return _detailsGroup.default;\n  }\n});\nObject.defineProperty(exports, \"FileDragAndDrop\", {\n  enumerable: true,\n  get: function () {\n    return _fileDragAndDrop.default;\n  }\n});\nObject.defineProperty(exports, \"Tabs\", {\n  enumerable: true,\n  get: function () {\n    return _tabs.default;\n  }\n});\nObject.defineProperty(exports, \"TextareaCounter\", {\n  enumerable: true,\n  get: function () {\n    return _textareaCounter.default;\n  }\n});\nObject.defineProperty(exports, \"Tooltip\", {\n  enumerable: true,\n  get: function () {\n    return _tooltip.default;\n  }\n});\n\nvar _detailsGroup = _interopRequireDefault(require(\"./components/details-group\"));\n\nvar _fileDragAndDrop = _interopRequireDefault(require(\"./components/file-drag-and-drop\"));\n\nvar _tabs = _interopRequireDefault(require(\"./components/tabs\"));\n\nvar _textareaCounter = _interopRequireDefault(require(\"./components/textarea-counter\"));\n\nvar _tooltip = _interopRequireDefault(require(\"./components/tooltip\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction initAll(options) {\n  options = typeof options !== \"undefined\" ? options : {}; // Scope initialization to only certain parts of the page\n  // Defaults to entire document if not set\n\n  const scope = typeof options.scope !== \"undefined\" ? options.scope : document;\n  scope.querySelectorAll('[data-module=\"fs-details-group\"]').forEach(m => {\n    new _detailsGroup.default(m);\n  });\n  scope.querySelectorAll('[data-module=\"fs-file-drag-and-drop\"]').forEach(m => {\n    new _fileDragAndDrop.default(m);\n  });\n  scope.querySelectorAll('[data-module=\"fs-tabs\"]').forEach(m => {\n    new _tabs.default(m);\n  });\n  scope.querySelectorAll('[data-module=\"fs-textarea-counter\"]').forEach(m => {\n    new _textareaCounter.default(m);\n  });\n  scope.querySelectorAll('[data-module=\"fs-tooltip\"]').forEach(m => {\n    new _tooltip.default(m);\n  });\n}\n\n},{\"./components/details-group\":2,\"./components/file-drag-and-drop\":3,\"./components/tabs\":4,\"./components/textarea-counter\":5,\"./components/tooltip\":6}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nclass DetailsGroup {\n  constructor($container) {\n    this.$container = $container;\n    this.$allModules = $container.querySelectorAll(\".fs-details\");\n    this.create();\n  }\n\n  create() {\n    this.$allModules.forEach($module => {\n      $module.bindToggle = this.onToggle.bind(this);\n      $module.addEventListener(\"toggle\", $module.bindToggle);\n    });\n  }\n\n  destroy() {\n    this.$allModules.forEach($module => {\n      $module.removeEventListener(\"toggle\", $module.bindToggle);\n    });\n  }\n\n  onToggle(e) {\n    if (!e.target.hasAttribute(\"open\")) {\n      return;\n    }\n\n    const $openModules = Array.from(this.$container.querySelectorAll(\".fs-details[open]\"));\n    $openModules.forEach($module => {\n      if ($module === e.target) {\n        return;\n      }\n\n      $module.removeAttribute(\"open\");\n    });\n  }\n\n}\n\nvar _default = DetailsGroup;\nexports.default = _default;\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _strings = require(\"../helpers/strings\");\n\nclass FileDragAndDrop {\n  constructor($module) {\n    this.$module = $module;\n    this.$input = $module.querySelector('input[type=\"file\"]');\n    this.$icons = $module.querySelector(\".fs-file-drag-and-drop__icons\");\n    this.$label = $module.querySelector(\".fs-file-drag-and-drop__label\");\n    this.iconsDefaultHTML = this.$icons.innerHTML;\n    this.labelDefaultHTML = this.$label.innerHTML;\n    this.id = `DragAndDrop-${(0, _strings.GenerateGuid)()}`;\n    this.create();\n  }\n\n  create() {\n    // Add a11y\n    this.$label.setAttribute(\"id\", this.id);\n    this.$label.setAttribute(\"aria-live\", \"polite\");\n    this.$input.setAttribute(\"aria-describedby\", this.$input.getAttribute(\"aria-describedby\") ? this.$input.getAttribute(\"aria-describedby\") + \" \" + this.id : this.id); // Bind events\n\n    this.$input.bindDragOver = this.onDragOver.bind(this);\n    this.$input.bindDragOut = this.onDragOut.bind(this);\n    this.$input.bindChange = this.onChange.bind(this);\n    this.$input.addEventListener(\"dragenter\", this.$input.bindDragOver, true);\n    this.$input.addEventListener(\"dragover\", this.$input.bindDragOver, true);\n    this.$input.addEventListener(\"dragleave\", this.$input.bindDragOut, true);\n    this.$input.addEventListener(\"drop\", this.$input.bindDragOut, true);\n    this.$input.addEventListener(\"change\", this.$input.bindChange, true);\n  }\n\n  onChange(e) {\n    this.handleFiles(e.target.files);\n  }\n\n  onDragOver() {\n    this.$module.classList.add(\"fs-file-drag-and-drop--highlight\");\n  }\n\n  onDragOut() {\n    this.$module.classList.remove(\"fs-file-drag-and-drop--highlight\");\n  }\n\n  handleFiles(files) {\n    this.resetFilePreview();\n\n    if (files.length) {\n      let fileNames = [];\n      let fileUrls = {};\n      this.$icons.innerHTML = \"\"; // Loop through files\n\n      [...files].forEach(file => {\n        fileNames.push(file.name); // Add image thumbnail (if it's an image)\n\n        if ([\"image/gif\", \"image/jpeg\", \"image/png\"].includes(file.type)) {\n          let reader = new FileReader();\n\n          reader.onload = e => {\n            let $previewImg = document.createElement(\"img\");\n            $previewImg.setAttribute(\"alt\", file.name);\n            $previewImg.classList.add(\"fs-file-drag-and-drop__icon\");\n            $previewImg.src = e.target.result;\n            this.$icons.appendChild($previewImg);\n          };\n\n          reader.readAsDataURL(file);\n        }\n      }); // Update label\n\n      if (fileNames.length === 1) {\n        this.$label.innerHTML = `Selected file: <strong>${fileNames[0]}</strong>.`;\n      } else {\n        this.$label.innerHTML = `Selected <strong>${fileNames.length} files</strong>.`;\n      }\n    }\n  }\n\n  resetFilePreview() {\n    this.$icons.innerHTML = this.iconsDefaultHTML;\n    this.$label.innerHTML = this.labelDefaultHTML;\n  }\n\n}\n\nvar _default = FileDragAndDrop;\nexports.default = _default;\n\n},{\"../helpers/strings\":8}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _keyCodes = require(\"../helpers/key-codes\");\n\n// This component's JS is heavily based on that produced by the Government Digital Service.\n// Hat tip to them and the GOV.UK team.\n// https://github.com/alphagov/govuk-frontend/blob/master/src/govuk/components/tabs/tabs.js\nclass Tab {\n  constructor($module) {\n    this.$module = $module;\n    this.$tabs = $module.querySelectorAll(\".fs-tabs__tab\");\n    this.$tablist = $module.querySelector(\".fs-tabs__list\");\n    this.$tablistItems = $module.querySelectorAll(\".fs-tabs__item\");\n    this.panelHiddenClass = \"fs-tabs__panel--hidden\"; // If we're missing any part, exit now or things will break\n\n    if (!this.$tabs || !this.$tablist || !this.$tablistItems) {\n      return;\n    }\n\n    this.create();\n  }\n  /**\n   * Initialisation methods\n   */\n\n\n  create() {\n    // Setup a11y roles\n    this.$tablist.setAttribute(\"role\", \"tablist\");\n    this.$tablistItems.forEach($item => {\n      $item.setAttribute(\"role\", \"presentation\");\n    }); // Tab functionality\n\n    this.$tabs.forEach($item => {\n      this.setAttributes($item);\n      $item.boundTabClick = this.onTabClick.bind(this);\n      $item.boundTabKeydown = this.onTabKeydown.bind(this);\n      $item.addEventListener(\"click\", $item.boundTabClick, true);\n      $item.addEventListener(\"keydown\", $item.boundTabKeydown, true);\n      this.hideTab($item);\n    }); // Set active tab\n\n    const $activeTab = this.getTab(window.location.hash) || this.$tabs[0];\n    this.showTab($activeTab); // Hashchange events\n\n    this.$module.boundOnHashChange = this.onHashChange.bind(this);\n    window.addEventListener(\"hashchange\", this.$module.boundOnHashChange, true);\n  }\n\n  destroy() {\n    // Remove a11y roles\n    this.$tablist.removeAttribute(\"role\");\n    this.$tablistItems.forEach($item => {\n      $item.removeAttribute(\"role\", \"presentation\");\n    }); // Remove tab functionality\n\n    this.$tabs.forEach($item => {\n      $item.removeEventListener(\"click\", $item.boundTabClick, true);\n      $item.removeEventListener(\"keydown\", $item.boundTabKeydown, true);\n      this.unsetAttributes($item);\n    }); // Remove hashchange event\n\n    window.removeEventListener(\"hashchange\", this.$module.boundOnHashChange, true);\n  }\n\n  setAttributes($tab) {\n    // Set default tab attributes\n    const panelId = this.getHref($tab).slice(1);\n    $tab.setAttribute(\"id\", panelId + \"-Tab\");\n    $tab.setAttribute(\"role\", \"tab\");\n    $tab.setAttribute(\"aria-controls\", panelId);\n    $tab.setAttribute(\"aria-selected\", \"false\");\n    $tab.setAttribute(\"tabindex\", \"-1\"); // Set default panel attributes\n\n    const $panel = this.getPanel($tab);\n    $panel.setAttribute(\"role\", \"tabpanel\");\n    $panel.setAttribute(\"aria-labelledby\", $tab.id);\n    $panel.classList.add(this.panelHiddenClass);\n  }\n\n  unsetAttributes($tab) {\n    // Unset tab attributes\n    $tab.removeAttribute(\"id\");\n    $tab.removeAttribute(\"role\");\n    $tab.removeAttribute(\"aria-controls\");\n    $tab.removeAttribute(\"aria-selected\");\n    $tab.removeAttribute(\"tabindex\"); // Unset panel attributes\n\n    const $panel = this.getPanel($tab);\n    $panel.removeAttribute(\"role\");\n    $panel.removeAttribute(\"aria-labelledby\");\n    $panel.classList.remove(this.panelHiddenClass);\n  }\n  /**\n   * Hash/history usage\n   */\n\n\n  onHashChange(e) {\n    const $hashTab = this.getTab(window.location.hash);\n\n    if (!$hashTab) {\n      return;\n    } // Prevent changing hash\n\n\n    if (this.changingHash) {\n      this.changingHash = false;\n      return;\n    } // Set active tba according to URL hash\n\n\n    const $previousTab = this.getCurrentTab();\n    this.hideTab($previousTab);\n    this.showTab($hashTab);\n    $hashTab.focus();\n  }\n\n  createHistoryEntry($tab) {\n    let $panel = this.getPanel($tab); // This code prevents the page from jumping to the new target hash.\n    // 1. Saves the panel ID into memory.\n    // 2. Remove the ID from the panel.\n    // 3. Change the hash in the URL.\n    // 4. Applies the ID from memory back to the panel.\n\n    const id = $panel.id;\n    $panel.id = \"\";\n    this.changingHash = true;\n    window.location.hash = this.getHref($tab).slice(1);\n    $panel.id = id;\n  }\n  /**\n   * Tab methods\n   */\n\n\n  getTab(hash) {\n    return this.$module.querySelector(`.fs-tabs__tab[href=\"${hash}\"]`);\n  }\n\n  getCurrentTab() {\n    return this.$module.querySelector(\".fs-tabs__item--current .fs-tabs__tab\");\n  }\n\n  hideTab($tab) {\n    this.unhighlightTab($tab);\n    this.hidePanel($tab);\n  }\n\n  showTab($tab) {\n    this.highlightTab($tab);\n    this.showPanel($tab);\n  }\n\n  unhighlightTab($tab) {\n    $tab.setAttribute(\"aria-selected\", \"false\");\n    $tab.parentNode.classList.remove(\"fs-tabs__item--current\");\n    $tab.setAttribute(\"tabindex\", \"-1\");\n  }\n\n  highlightTab($tab) {\n    $tab.setAttribute(\"aria-selected\", \"true\");\n    $tab.parentNode.classList.add(\"fs-tabs__item--current\");\n    $tab.setAttribute(\"tabindex\", \"0\");\n  }\n\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab();\n    const $nextTablistItem = $currentTab.parentNode.nextElementSibling;\n    let $nextTab;\n\n    if ($nextTablistItem) {\n      $nextTab = $nextTablistItem.querySelector(\".fs-tabs__tab\");\n    }\n\n    if ($nextTab) {\n      this.hideTab($currentTab);\n      this.showTab($nextTab);\n      $nextTab.focus();\n      this.createHistoryEntry($nextTab);\n    }\n  }\n\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab();\n    const $previousTablistItem = $currentTab.parentNode.previousElementSibling;\n    let $previousTab;\n\n    if ($previousTablistItem) {\n      $previousTab = $previousTablistItem.querySelector(\".fs-tabs__tab\");\n    }\n\n    if ($previousTab) {\n      this.hideTab($currentTab);\n      this.showTab($previousTab);\n      $previousTab.focus();\n      this.createHistoryEntry($previousTab);\n    }\n  }\n  /**\n   * Panel methods\n   */\n\n\n  getPanel($tab) {\n    return this.$module.querySelector(this.getHref($tab));\n  }\n\n  showPanel($tab) {\n    const $panel = this.getPanel($tab);\n    $panel.classList.remove(this.panelHiddenClass);\n  }\n\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab);\n    $panel.classList.add(this.panelHiddenClass);\n  }\n  /**\n   * Mouse/keyboard handlers\n   */\n\n\n  onTabClick(e) {\n    if (!e.target.classList.contains(\"fs-tabs__tab\")) {\n      return false;\n    }\n\n    e.preventDefault();\n    const $newTab = e.target;\n    const $currentTab = this.getCurrentTab();\n    this.hideTab($currentTab);\n    this.showTab($newTab);\n    this.createHistoryEntry($newTab);\n  }\n\n  onTabKeydown(e) {\n    switch (e.which || e.keyCode) {\n      case (0, _keyCodes.KeyCodes)().LEFT:\n      case (0, _keyCodes.KeyCodes)().UP:\n        this.activatePreviousTab();\n        e.preventDefault();\n        break;\n\n      case (0, _keyCodes.KeyCodes)().RIGHT:\n      case (0, _keyCodes.KeyCodes)().DOWN:\n        this.activateNextTab();\n        e.preventDefault();\n        break;\n    }\n  }\n  /**\n   * Helpers\n   */\n\n\n  getHref($tab) {\n    const href = $tab.getAttribute(\"href\");\n    const hash = href.slice(href.indexOf(\"#\"), href.length);\n    return hash;\n  }\n\n}\n\nvar _default = Tab;\nexports.default = _default;\n\n},{\"../helpers/key-codes\":7}],5:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nclass TextareaCounter {\n  constructor($module) {\n    this.$module = $module;\n    this.$textarea = $module.querySelector(\"textarea\");\n    this.$counter = this.buildCounterHtml(); // Activate!\n\n    this.updateCounter(); // Bind input event\n\n    this.$textarea.addEventListener(\"input\", () => {\n      this.updateCounter();\n    });\n  }\n\n  buildCounterHtml() {\n    if (!this.$textarea.id) {\n      console.error(\"TextareaCounter: Textarea must have a unique `id` attribute set to attach a character counter.\");\n      return;\n    }\n\n    if (!this.$textarea.maxLength) {\n      console.error(\"TextareaCounter: Textarea must have a `maxlength` attribute set to attach a character counter.\");\n      return;\n    }\n\n    this.maxlength = this.$textarea.maxLength;\n    const counterId = this.$textarea.id + \"-Counter\"; // Add `aria-describedby` attribute to textarea\n\n    if (this.$textarea.getAttribute(\"aria-describedby\")) {\n      const describedBy = this.$textarea.getAttribute(\"aria-describedby\");\n      this.$textarea.setAttribute(\"aria-describedby\", `${describedBy} ${counterId}`);\n    } else {\n      this.$textarea.setAttribute(\"aria-describedby\", counterId);\n    } // Remove maxlength attribute as we're going to validate that separately now\n\n\n    this.$textarea.removeAttribute(\"maxlength\"); // Create counter HTML\n\n    const $counterContainer = document.createElement(\"div\");\n    $counterContainer.setAttribute(\"id\", counterId);\n    $counterContainer.classList.add(\"fs-textarea-counter__counter\"); // Append\n\n    this.$module.appendChild($counterContainer);\n    return $counterContainer;\n  }\n\n  updateCounter() {\n    const count = this.count();\n    let counterText = \"\";\n\n    if (count.tooLong) {\n      counterText = count.charactersOver === 1 ? `Limit reached. You're over by ${count.charactersOver} character.` : `Limit reached. You're over by ${count.charactersOver} characters.`;\n      this.$counter.setAttribute(\"role\", \"alert\");\n      this.$textarea.setCustomValidity(`Input is too long. A maximum of ${count.maxlength} characters are allowed. You have used ${count.charactersUsed} characters.`);\n    } else {\n      counterText = count.charactersRemaining === 1 ? `You have ${count.charactersRemaining} character remaining.` : `You have ${count.charactersRemaining} characters remaining.`;\n      this.$counter.removeAttribute(\"role\");\n      this.$textarea.setCustomValidity(\"\");\n    }\n\n    this.$counter.innerText = counterText;\n    this.$counter.setAttribute(\"aria-live\", count.charactersRemaining < 1 ? \"assertive\" : \"polite\");\n  }\n\n  count() {\n    const charactersRemaining = this.maxlength - this.$textarea.value.length;\n    return {\n      maxlength: this.maxlength,\n      charactersUsed: this.$textarea.value.length,\n      charactersRemaining: charactersRemaining,\n      charactersOver: charactersRemaining < 0 ? Math.abs(charactersRemaining) : 0,\n      tooLong: charactersRemaining < 0 ? true : false\n    };\n  }\n\n}\n\nvar _default = TextareaCounter;\nexports.default = _default;\n\n},{}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _strings = require(\"../helpers/strings\");\n\nvar _keyCodes = require(\"../helpers/key-codes\");\n\nclass Tooltip {\n  constructor($module) {\n    this.$module = $module;\n    this.$trigger = $module.firstElementChild;\n    this.$tooltip = $module.querySelector(\".fs-tooltip__tip\");\n    this.timeoutId = null;\n    this.timeoutLength = 500; // milliseconds\n\n    this.tooltipOriginalId = this.$tooltip.id;\n    this.tooltipId = this.tooltipOriginalId || `tooltip-${(0, _strings.GenerateGuid)()}`; // There's no tooltip, exit\n\n    if (!this.$trigger || !this.$tooltip) {\n      return;\n    }\n\n    this.create();\n  }\n\n  create() {\n    // Tooltip a11y\n    this.$tooltip.setAttribute(\"id\", this.tooltipId);\n    this.$tooltip.setAttribute(\"aria-hidden\", \"true\"); // Trigger events\n\n    this.$trigger.boundMouseEnter = this.onFocus.bind(this);\n    this.$trigger.boundMouseLeave = this.onMouseLeave.bind(this);\n    this.$trigger.boundFocus = this.onFocus.bind(this);\n    this.$trigger.boundBlur = this.onBlur.bind(this);\n    this.$trigger.boundEscape = this.onEscape.bind(this);\n    this.$trigger.addEventListener(\"mouseenter\", this.$trigger.boundMouseEnter, true);\n    this.$trigger.addEventListener(\"mouseleave\", this.$trigger.boundMouseLeave, true);\n    this.$trigger.addEventListener(\"focus\", this.$trigger.boundFocus, true);\n    this.$trigger.addEventListener(\"blur\", this.$trigger.boundBlur, true);\n    this.$trigger.addEventListener(\"keydown\", this.$trigger.boundEscape, true);\n    this.hideTooltip();\n  }\n\n  destroy() {\n    if (this.tooltipOriginalId) {\n      this.$tooltip.setAttribute(\"id\", this.tooltipOriginalId);\n    } else {\n      this.$tooltip.removeAttribute(\"id\");\n    }\n\n    this.$tooltip.removeAttribute(\"aria-hidden\");\n    this.$trigger.removeEventListener(\"mouseenter\", this.$trigger.boundMouseEnter, true);\n    this.$trigger.removeEventListener(\"mouseleave\", this.$trigger.boundMouseLeave, true);\n    this.$trigger.removeEventListener(\"focus\", this.$trigger.boundFocus, true);\n    this.$trigger.removeEventListener(\"blur\", this.$trigger.boundBlur, true);\n    this.$trigger.removeEventListener(\"keydown\", this.$trigger.boundEscape, true);\n  }\n\n  onFocus() {\n    this.showTooltip();\n  }\n\n  onBlur() {\n    this.hideTooltip();\n  }\n\n  onEscape(e) {\n    const code = e.which || e.keyCode;\n\n    if (code === (0, _keyCodes.KeyCodes)().ESCAPE) {\n      this.hideTooltip();\n    }\n  }\n\n  onMouseEnter() {\n    this.showTooltip();\n\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n  }\n\n  onMouseLeave() {\n    this.timeoutId = setTimeout(() => {\n      this.hideTooltip();\n    }, this.timeoutLength);\n  }\n\n  showTooltip() {\n    this.determinePosition();\n    this.$tooltip.classList.remove(\"fs-tooltip__tip--hidden\");\n    this.$tooltip.setAttribute(\"aria-hidden\", \"false\");\n  }\n\n  hideTooltip() {\n    this.$tooltip.classList.add(\"fs-tooltip__tip--hidden\");\n    this.$tooltip.setAttribute(\"aria-hidden\", \"true\");\n  }\n\n  determinePosition() {\n    // Calculate element positions\n    const rect = this.$trigger.getBoundingClientRect();\n    const spaceAvailable = {\n      top: rect.top,\n      left: rect.left,\n      right: window.innerWidth - rect.right,\n      bottom: window.innerHeight - rect.bottom\n    }; // Iterate though the results to find where we have the most space\n\n    let largestVal = 0;\n    let largestKey = null;\n    Object.keys(spaceAvailable).map(key => {\n      if (spaceAvailable[key] > largestVal) {\n        largestVal = spaceAvailable[key];\n        largestKey = key;\n      }\n    });\n    this.$tooltip.dataset.side = largestKey || \"bottom\";\n  }\n\n}\n\nvar _default = Tooltip;\nexports.default = _default;\n\n},{\"../helpers/key-codes\":7,\"../helpers/strings\":8}],7:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KeyCodes = KeyCodes;\n\nfunction KeyCodes() {\n  return {\n    TAB: 9,\n    RETURN: 13,\n    ESCAPE: 27,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n  };\n}\n\n},{}],8:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GenerateGuid = GenerateGuid;\n\n// Generate a GUID. Matches the RFC, but no real guarantee of uniqueness.\nfunction GenerateGuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n        v = c == \"x\" ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n},{}]},{},[1])(1)\n});\n"],"file":"all.js"}